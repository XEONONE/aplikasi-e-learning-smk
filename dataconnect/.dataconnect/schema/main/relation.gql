extend type Assignment {
  """
  ✨ List `Submission` objects in a one-to-many relationship (where `Submission`.`assignment` is this object).
  """
  submissions_on_assignment(
    """
    Filter condition to narrow down the query results.
    """
    where: Submission_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Submission_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Submission_Having
  ): [Submission!]! @fdc_generated(from: "Submission.assignment", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `User` objects using `Submission` as the join table (a `Submission` object exists where its `assignment` is this and its `student` is that).
  """
  users_via_Submission(
    """
    Filter condition to narrow down the query results.
    """
    where: Submission_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Submission_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Submission_Having
  ): [User!]! @fdc_generated(from: "Submission", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Assignment", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Assignment` table.
  """
  _count: Int! @fdc_generated(from: "Assignment.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Assignment` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Assignment.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Assignment` table where the `dueDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  dueDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Assignment.dueDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Assignment` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Assignment.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Assignment` table where the `maxScore` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  maxScore_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Assignment.maxScore", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Assignment` table where the `moduleId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  moduleId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Assignment.moduleId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Assignment` table where the `title` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  title_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Assignment.title", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Assignment` table where the `type` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  type_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Assignment.type", purpose: QUERY_COUNT)
  """
  ✨ Sum the `maxScore` field in the `Assignment` table.
  """
  maxScore_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Assignment.maxScore", purpose: QUERY_SUM)
  """
  ✨ Average the `maxScore` field in the `Assignment` table.
  """
  maxScore_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Assignment.maxScore", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `dueDate` field in the `Assignment` table.
  """
  dueDate_min: Date @fdc_generated(from: "Assignment.dueDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `maxScore` field in the `Assignment` table.
  """
  maxScore_min: Int @fdc_generated(from: "Assignment.maxScore", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `dueDate` field in the `Assignment` table.
  """
  dueDate_max: Date @fdc_generated(from: "Assignment.dueDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `maxScore` field in the `Assignment` table.
  """
  maxScore_max: Int @fdc_generated(from: "Assignment.maxScore", purpose: QUERY_MAX)
}
extend type Course {
  """
  ✨ List `Enrollment` objects in a one-to-many relationship (where `Enrollment`.`course` is this object).
  """
  enrollments_on_course(
    """
    Filter condition to narrow down the query results.
    """
    where: Enrollment_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Enrollment_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Enrollment_Having
  ): [Enrollment!]! @fdc_generated(from: "Enrollment.course", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Module` objects in a one-to-many relationship (where `Module`.`course` is this object).
  """
  modules_on_course(
    """
    Filter condition to narrow down the query results.
    """
    where: Module_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Module_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Module_Having
  ): [Module!]! @fdc_generated(from: "Module.course", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `User` objects using `Enrollment` as the join table (a `Enrollment` object exists where its `course` is this and its `student` is that).
  """
  users_via_Enrollment(
    """
    Filter condition to narrow down the query results.
    """
    where: Enrollment_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Enrollment_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Enrollment_Having
  ): [User!]! @fdc_generated(from: "Enrollment", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Course", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Course` table.
  """
  _count: Int! @fdc_generated(from: "Course.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Course` table where the `category` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  category_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Course.category", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Course` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Course.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Course` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Course.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Course` table where the `difficultyLevel` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  difficultyLevel_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Course.difficultyLevel", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Course` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Course.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Course` table where the `instructorId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  instructorId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Course.instructorId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Course` table where the `thumbnailUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  thumbnailUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Course.thumbnailUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Course` table where the `title` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  title_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Course.title", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `Course` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Course.createdAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Course` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Course.createdAt", purpose: QUERY_MAX)
}
extend type Enrollment {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Enrollment", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Enrollment` table.
  """
  _count: Int! @fdc_generated(from: "Enrollment.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Enrollment` table where the `completionDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  completionDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Enrollment.completionDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Enrollment` table where the `courseId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  courseId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Enrollment.courseId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Enrollment` table where the `enrollmentDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  enrollmentDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Enrollment.enrollmentDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Enrollment` table where the `grade` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  grade_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Enrollment.grade", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Enrollment` table where the `status` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  status_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Enrollment.status", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Enrollment` table where the `studentId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  studentId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Enrollment.studentId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `grade` field in the `Enrollment` table.
  """
  grade_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Enrollment.grade", purpose: QUERY_SUM)
  """
  ✨ Average the `grade` field in the `Enrollment` table.
  """
  grade_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Enrollment.grade", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `completionDate` field in the `Enrollment` table.
  """
  completionDate_min: Timestamp @fdc_generated(from: "Enrollment.completionDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `enrollmentDate` field in the `Enrollment` table.
  """
  enrollmentDate_min: Timestamp @fdc_generated(from: "Enrollment.enrollmentDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `grade` field in the `Enrollment` table.
  """
  grade_min: Int @fdc_generated(from: "Enrollment.grade", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `completionDate` field in the `Enrollment` table.
  """
  completionDate_max: Timestamp @fdc_generated(from: "Enrollment.completionDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `enrollmentDate` field in the `Enrollment` table.
  """
  enrollmentDate_max: Timestamp @fdc_generated(from: "Enrollment.enrollmentDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `grade` field in the `Enrollment` table.
  """
  grade_max: Int @fdc_generated(from: "Enrollment.grade", purpose: QUERY_MAX)
}
extend type Lesson {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Lesson", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Lesson` table.
  """
  _count: Int! @fdc_generated(from: "Lesson.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Lesson` table where the `contentUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  contentUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Lesson.contentUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Lesson` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Lesson.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Lesson` table where the `duration` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  duration_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Lesson.duration", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Lesson` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Lesson.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Lesson` table where the `moduleId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  moduleId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Lesson.moduleId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Lesson` table where the `orderIndex` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  orderIndex_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Lesson.orderIndex", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Lesson` table where the `title` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  title_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Lesson.title", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Lesson` table where the `type` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  type_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Lesson.type", purpose: QUERY_COUNT)
  """
  ✨ Sum the `duration` field in the `Lesson` table.
  """
  duration_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Lesson.duration", purpose: QUERY_SUM)
  """
  ✨ Sum the `orderIndex` field in the `Lesson` table.
  """
  orderIndex_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Lesson.orderIndex", purpose: QUERY_SUM)
  """
  ✨ Average the `duration` field in the `Lesson` table.
  """
  duration_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Lesson.duration", purpose: QUERY_AVG)
  """
  ✨ Average the `orderIndex` field in the `Lesson` table.
  """
  orderIndex_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Lesson.orderIndex", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `duration` field in the `Lesson` table.
  """
  duration_min: Int @fdc_generated(from: "Lesson.duration", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `orderIndex` field in the `Lesson` table.
  """
  orderIndex_min: Int @fdc_generated(from: "Lesson.orderIndex", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `duration` field in the `Lesson` table.
  """
  duration_max: Int @fdc_generated(from: "Lesson.duration", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `orderIndex` field in the `Lesson` table.
  """
  orderIndex_max: Int @fdc_generated(from: "Lesson.orderIndex", purpose: QUERY_MAX)
}
extend type Module {
  """
  ✨ List `Assignment` objects in a one-to-many relationship (where `Assignment`.`module` is this object).
  """
  assignments_on_module(
    """
    Filter condition to narrow down the query results.
    """
    where: Assignment_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Assignment_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Assignment_Having
  ): [Assignment!]! @fdc_generated(from: "Assignment.module", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Lesson` objects in a one-to-many relationship (where `Lesson`.`module` is this object).
  """
  lessons_on_module(
    """
    Filter condition to narrow down the query results.
    """
    where: Lesson_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Lesson_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Lesson_Having
  ): [Lesson!]! @fdc_generated(from: "Lesson.module", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Module", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Module` table.
  """
  _count: Int! @fdc_generated(from: "Module.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Module` table where the `courseId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  courseId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Module.courseId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Module` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Module.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Module` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Module.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Module` table where the `orderIndex` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  orderIndex_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Module.orderIndex", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Module` table where the `title` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  title_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Module.title", purpose: QUERY_COUNT)
  """
  ✨ Sum the `orderIndex` field in the `Module` table.
  """
  orderIndex_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Module.orderIndex", purpose: QUERY_SUM)
  """
  ✨ Average the `orderIndex` field in the `Module` table.
  """
  orderIndex_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Module.orderIndex", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `orderIndex` field in the `Module` table.
  """
  orderIndex_min: Int @fdc_generated(from: "Module.orderIndex", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `orderIndex` field in the `Module` table.
  """
  orderIndex_max: Int @fdc_generated(from: "Module.orderIndex", purpose: QUERY_MAX)
}
extend type Submission {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Submission", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Submission` table.
  """
  _count: Int! @fdc_generated(from: "Submission.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Submission` table where the `assignmentId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  assignmentId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Submission.assignmentId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Submission` table where the `feedback` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  feedback_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Submission.feedback", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Submission` table where the `score` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  score_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Submission.score", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Submission` table where the `studentId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  studentId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Submission.studentId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Submission` table where the `studentResponse` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  studentResponse_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Submission.studentResponse", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Submission` table where the `submissionDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  submissionDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Submission.submissionDate", purpose: QUERY_COUNT)
  """
  ✨ Sum the `score` field in the `Submission` table.
  """
  score_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Submission.score", purpose: QUERY_SUM)
  """
  ✨ Average the `score` field in the `Submission` table.
  """
  score_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Submission.score", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `score` field in the `Submission` table.
  """
  score_min: Int @fdc_generated(from: "Submission.score", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `submissionDate` field in the `Submission` table.
  """
  submissionDate_min: Timestamp @fdc_generated(from: "Submission.submissionDate", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `score` field in the `Submission` table.
  """
  score_max: Int @fdc_generated(from: "Submission.score", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `submissionDate` field in the `Submission` table.
  """
  submissionDate_max: Timestamp @fdc_generated(from: "Submission.submissionDate", purpose: QUERY_MAX)
}
extend type User {
  """
  ✨ List `Course` objects in a one-to-many relationship (where `Course`.`instructor` is this object).
  """
  courses_on_instructor(
    """
    Filter condition to narrow down the query results.
    """
    where: Course_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Course_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Course_Having
  ): [Course!]! @fdc_generated(from: "Course.instructor", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Enrollment` objects in a one-to-many relationship (where `Enrollment`.`student` is this object).
  """
  enrollments_on_student(
    """
    Filter condition to narrow down the query results.
    """
    where: Enrollment_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Enrollment_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Enrollment_Having
  ): [Enrollment!]! @fdc_generated(from: "Enrollment.student", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Submission` objects in a one-to-many relationship (where `Submission`.`student` is this object).
  """
  submissions_on_student(
    """
    Filter condition to narrow down the query results.
    """
    where: Submission_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Submission_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Submission_Having
  ): [Submission!]! @fdc_generated(from: "Submission.student", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Assignment` objects using `Submission` as the join table (a `Submission` object exists where its `student` is this and its `assignment` is that).
  """
  assignments_via_Submission(
    """
    Filter condition to narrow down the query results.
    """
    where: Submission_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Submission_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Submission_Having
  ): [Assignment!]! @fdc_generated(from: "Submission", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Course` objects using `Enrollment` as the join table (a `Enrollment` object exists where its `student` is this and its `course` is that).
  """
  courses_via_Enrollment(
    """
    Filter condition to narrow down the query results.
    """
    where: Enrollment_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Enrollment_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Enrollment_Having
  ): [Course!]! @fdc_generated(from: "Enrollment", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "User", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `User` table.
  """
  _count: Int! @fdc_generated(from: "User.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `displayName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  displayName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.displayName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `email` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  email_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.email", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `major` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  major_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.major", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `photoUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  photoUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.photoUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `role` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  role_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.role", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `User` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `User` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MAX)
}
