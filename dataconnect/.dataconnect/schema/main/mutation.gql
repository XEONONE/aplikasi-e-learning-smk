extend type Mutation {
  """
  ✨ Insert a single `Assignment` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  assignment_insert(
    """
    Data object to insert into the table.
    """
    data: Assignment_Data!
  ): Assignment_KeyOutput! @fdc_generated(from: "Assignment", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Course` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  course_insert(
    """
    Data object to insert into the table.
    """
    data: Course_Data!
  ): Course_KeyOutput! @fdc_generated(from: "Course", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Enrollment` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  enrollment_insert(
    """
    Data object to insert into the table.
    """
    data: Enrollment_Data!
  ): Enrollment_KeyOutput! @fdc_generated(from: "Enrollment", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Lesson` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  lesson_insert(
    """
    Data object to insert into the table.
    """
    data: Lesson_Data!
  ): Lesson_KeyOutput! @fdc_generated(from: "Lesson", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Module` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  module_insert(
    """
    Data object to insert into the table.
    """
    data: Module_Data!
  ): Module_KeyOutput! @fdc_generated(from: "Module", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Submission` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  submission_insert(
    """
    Data object to insert into the table.
    """
    data: Submission_Data!
  ): Submission_KeyOutput! @fdc_generated(from: "Submission", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Assignment` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  assignment_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Assignment_Data!]!
  ): [Assignment_KeyOutput!]! @fdc_generated(from: "Assignment", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Course` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  course_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Course_Data!]!
  ): [Course_KeyOutput!]! @fdc_generated(from: "Course", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Enrollment` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  enrollment_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Enrollment_Data!]!
  ): [Enrollment_KeyOutput!]! @fdc_generated(from: "Enrollment", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Lesson` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  lesson_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Lesson_Data!]!
  ): [Lesson_KeyOutput!]! @fdc_generated(from: "Lesson", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Module` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  module_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Module_Data!]!
  ): [Module_KeyOutput!]! @fdc_generated(from: "Module", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Submission` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  submission_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Submission_Data!]!
  ): [Submission_KeyOutput!]! @fdc_generated(from: "Submission", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Assignment` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Assignment`.
  """
  assignment_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Assignment_Data!
  ): Assignment_KeyOutput! @fdc_generated(from: "Assignment", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Course` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Course`.
  """
  course_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Course_Data!
  ): Course_KeyOutput! @fdc_generated(from: "Course", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Enrollment` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Enrollment`.
  """
  enrollment_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Enrollment_Data!
  ): Enrollment_KeyOutput! @fdc_generated(from: "Enrollment", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Lesson` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Lesson`.
  """
  lesson_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Lesson_Data!
  ): Lesson_KeyOutput! @fdc_generated(from: "Lesson", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Module` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Module`.
  """
  module_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Module_Data!
  ): Module_KeyOutput! @fdc_generated(from: "Module", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Submission` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Submission`.
  """
  submission_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Submission_Data!
  ): Submission_KeyOutput! @fdc_generated(from: "Submission", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `Assignment` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Assignment`.
  """
  assignment_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Assignment_Data!]!
  ): [Assignment_KeyOutput!]! @fdc_generated(from: "Assignment", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Course` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Course`.
  """
  course_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Course_Data!]!
  ): [Course_KeyOutput!]! @fdc_generated(from: "Course", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Enrollment` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Enrollment`.
  """
  enrollment_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Enrollment_Data!]!
  ): [Enrollment_KeyOutput!]! @fdc_generated(from: "Enrollment", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Lesson` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Lesson`.
  """
  lesson_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Lesson_Data!]!
  ): [Lesson_KeyOutput!]! @fdc_generated(from: "Lesson", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Module` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Module`.
  """
  module_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Module_Data!]!
  ): [Module_KeyOutput!]! @fdc_generated(from: "Module", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Submission` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Submission`.
  """
  submission_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Submission_Data!]!
  ): [Submission_KeyOutput!]! @fdc_generated(from: "Submission", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `Assignment` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Assignment` or `null` if not found.
  """
  assignment_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Assignment_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Assignment_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Assignment_Data!
  ): Assignment_KeyOutput @fdc_generated(from: "Assignment", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Course` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Course` or `null` if not found.
  """
  course_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Course_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Course_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Course_Data!
  ): Course_KeyOutput @fdc_generated(from: "Course", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Enrollment` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Enrollment` or `null` if not found.
  """
  enrollment_update(
    """
    The key used to identify the object.
    """
    key: Enrollment_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Enrollment_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Enrollment_Data!
  ): Enrollment_KeyOutput @fdc_generated(from: "Enrollment", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Lesson` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Lesson` or `null` if not found.
  """
  lesson_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Lesson_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Lesson_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Lesson_Data!
  ): Lesson_KeyOutput @fdc_generated(from: "Lesson", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Module` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Module` or `null` if not found.
  """
  module_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Module_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Module_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Module_Data!
  ): Module_KeyOutput @fdc_generated(from: "Module", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Submission` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Submission` or `null` if not found.
  """
  submission_update(
    """
    The key used to identify the object.
    """
    key: Submission_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Submission_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Submission_Data!
  ): Submission_KeyOutput @fdc_generated(from: "Submission", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `User` or `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Assignment` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  assignment_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Assignment_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Assignment_Data!
  ): Int! @fdc_generated(from: "Assignment", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Course` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  course_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Course_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Course_Data!
  ): Int! @fdc_generated(from: "Course", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Enrollment` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  enrollment_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Enrollment_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Enrollment_Data!
  ): Int! @fdc_generated(from: "Enrollment", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Lesson` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  lesson_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Lesson_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Lesson_Data!
  ): Int! @fdc_generated(from: "Lesson", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Module` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  module_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Module_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Module_Data!
  ): Int! @fdc_generated(from: "Module", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Submission` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  submission_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Submission_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Submission_Data!
  ): Int! @fdc_generated(from: "Submission", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Assignment` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  assignment_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Assignment_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Assignment_FirstRow
  ): Assignment_KeyOutput @fdc_generated(from: "Assignment", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Course` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  course_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Course_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Course_FirstRow
  ): Course_KeyOutput @fdc_generated(from: "Course", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Enrollment` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  enrollment_delete(
    """
    The key used to identify the object.
    """
    key: Enrollment_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Enrollment_FirstRow
  ): Enrollment_KeyOutput @fdc_generated(from: "Enrollment", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Lesson` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  lesson_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Lesson_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Lesson_FirstRow
  ): Lesson_KeyOutput @fdc_generated(from: "Lesson", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Module` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  module_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Module_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Module_FirstRow
  ): Module_KeyOutput @fdc_generated(from: "Module", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Submission` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  submission_delete(
    """
    The key used to identify the object.
    """
    key: Submission_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Submission_FirstRow
  ): Submission_KeyOutput @fdc_generated(from: "Submission", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Assignment` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  assignment_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Assignment_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Assignment", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Course` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  course_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Course_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Course", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Enrollment` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  enrollment_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Enrollment_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Enrollment", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Lesson` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  lesson_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Lesson_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Lesson", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Module` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  module_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Module_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Module", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Submission` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  submission_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Submission_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Submission", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
