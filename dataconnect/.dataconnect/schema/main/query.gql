extend type Query {
  """
  ✨ Look up a single `Assignment` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  assignment(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Assignment_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Assignment_FirstRow
  ): Assignment @fdc_generated(from: "Assignment", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Course` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  course(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Course_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Course_FirstRow
  ): Course @fdc_generated(from: "Course", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Enrollment` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  enrollment(
    """
    The key used to identify the object.
    """
    key: Enrollment_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Enrollment_FirstRow
  ): Enrollment @fdc_generated(from: "Enrollment", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Lesson` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  lesson(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Lesson_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Lesson_FirstRow
  ): Lesson @fdc_generated(from: "Lesson", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Module` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  module(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Module_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Module_FirstRow
  ): Module @fdc_generated(from: "Module", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Submission` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  submission(
    """
    The key used to identify the object.
    """
    key: Submission_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Submission_FirstRow
  ): Submission @fdc_generated(from: "Submission", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ List `Assignment` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  assignments(
    """
    Filter condition to narrow down the query results.
    """
    where: Assignment_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Assignment_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Assignment_Having
  ): [Assignment!]! @fdc_generated(from: "Assignment", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Course` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  courses(
    """
    Filter condition to narrow down the query results.
    """
    where: Course_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Course_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Course_Having
  ): [Course!]! @fdc_generated(from: "Course", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Enrollment` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  enrollments(
    """
    Filter condition to narrow down the query results.
    """
    where: Enrollment_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Enrollment_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Enrollment_Having
  ): [Enrollment!]! @fdc_generated(from: "Enrollment", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Lesson` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  lessons(
    """
    Filter condition to narrow down the query results.
    """
    where: Lesson_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Lesson_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Lesson_Having
  ): [Lesson!]! @fdc_generated(from: "Lesson", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Module` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  modules(
    """
    Filter condition to narrow down the query results.
    """
    where: Module_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Module_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Module_Having
  ): [Module!]! @fdc_generated(from: "Module", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Submission` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  submissions(
    """
    Filter condition to narrow down the query results.
    """
    where: Submission_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Submission_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Submission_Having
  ): [Submission!]! @fdc_generated(from: "Submission", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: User_Having
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
}
