# Example mutations for e-learning app

# Upsert (update or insert) a user's data based on their auth.uid
mutation UpsertUser($id: String!, $nama: String!, $role: String!, $email: String, $kelas: String, $mengajarKelas: [String], $isActivated: Boolean!, $fcmTokens: [String], $uid: String) @auth(level: USER) {
  # The "auth.uid" server value ensures that users can only register their own user.
  user_upsert(data: { id: $id, nama: $nama, role: $role, email: $email, kelas: $kelas, mengajarKelas: $mengajarKelas, isActivated: $isActivated, fcmTokens: $fcmTokens, uid: $uid })
}

# Create Materi
mutation CreateMateri($title: String!, $description: String, $content: String)
@auth(level: USER) {
  materi_insert(data: { title: $title, description: $description, content: $content, createdById_expr: "auth.uid" })
}

# Update Materi
mutation UpdateMateri($id: UUID!, $title: String!, $description: String, $content: String)
@auth(level: USER) {
  materi_update(key: { id: $id }, data: { title: $title, description: $description, content: $content })
}

# Delete Materi
mutation DeleteMateri($id: UUID!) @auth(level: USER) {
  materi_delete(key: { id: $id })
}

# Create Tugas
mutation CreateTugas($title: String!, $description: String, $dueDate: Date!)
@auth(level: USER) {
  tugas_insert(data: { title: $title, description: $description, dueDate: $dueDate, createdById_expr: "auth.uid" })
}

# Update Tugas
mutation UpdateTugas($id: UUID!, $title: String!, $description: String, $dueDate: Date!)
@auth(level: USER) {
  tugas_update(key: { id: $id }, data: { title: $title, description: $description, dueDate: $dueDate })
}

# Delete Tugas
mutation DeleteTugas($id: UUID!) @auth(level: USER) {
  tugas_delete(key: { id: $id })
}

# Create Pengumuman
mutation CreatePengumuman($title: String!, $content: String!)
@auth(level: USER) {
  pengumuman_insert(data: { title: $title, content: $content, createdById_expr: "auth.uid" })
}

# Update Pengumuman
mutation UpdatePengumuman($id: UUID!, $title: String!, $content: String!)
@auth(level: USER) {
  pengumuman_update(key: { id: $id }, data: { title: $title, content: $content })
}

# Delete Pengumuman
mutation DeletePengumuman($id: UUID!) @auth(level: USER) {
  pengumuman_delete(key: { id: $id })
}

# Submit Tugas
mutation SubmitTugas($tugasId: UUID!, $content: String)
@auth(level: USER) {
  submission_insert(data: { tugasId: $tugasId, submittedById_expr: "auth.uid", content: $content })
}

# Update Submission
mutation UpdateSubmission($id: UUID!, $content: String)
@auth(level: USER) {
  submission_update(key: { id: $id }, data: { content: $content })
}

# Grade Submission
mutation GradeSubmission($id: UUID!, $nilai: Int)
@auth(level: USER) {
  submission_update(key: { id: $id }, data: { nilai: $nilai })
}

# Add Comment
mutation AddComment($content: String!, $onMateriId: UUID, $onTugasId: UUID, $onPengumumanId: UUID)
@auth(level: USER) {
  comment_insert(data: { content: $content, createdById_expr: "auth.uid", onMateriId: $onMateriId, onTugasId: $onTugasId, onPengumumanId: $onPengumumanId })
}

# Delete Comment
mutation DeleteComment($id: UUID!) @auth(level: USER) {
  comment_delete(key: { id: $id })
}
